import os
import time
import logging
import json
import random
from telebot import TeleBot, types

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8399358948:AAEjSS7weboKJvoY5-6mGEy2Jd5K4OOmgQE"
ADMIN_IDS = [8316216845]
CRATE_LIMIT = 5
CRATE_PERIOD_HOURS = 5
DATA_PATH = "/storage/emulated/0/Documents/—Ç–∞–Ω–∫ –±–æ—Ç/data/"
ADMIN_SECRET = "Si900900"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = TeleBot(BOT_TOKEN)

# –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö
os.makedirs(DATA_PATH, exist_ok=True)
os.makedirs(os.path.join(DATA_PATH, "images"), exist_ok=True)

# –ö–ª–∞—Å—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ç–∞–Ω–∫–æ–≤
class TankDatabase:
    def __init__(self):
        self.data_file = os.path.join(DATA_PATH, "tanks.json")
        self.tanks = self.load_tanks()
    
    def load_tanks(self):
        try:
            with open(self.data_file, "r") as f:
                return json.load(f)
        except:
            return []
    
    def get_tank(self, tank_id):
        for tank in self.tanks:
            if tank["id"] == tank_id:
                return tank
        return None
    
    def get_random_tank(self):
        return random.choice(self.tanks) if self.tanks else None

# –ö–ª–∞—Å—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
class UserManager:
    def __init__(self):
        self.data_file = os.path.join(DATA_PATH, "users.json")
        self.users = self.load_users()
    
    def load_users(self):
        if not os.path.exists(self.data_file):
            with open(self.data_file, "w") as f:
                json.dump({}, f)
            return {}
        
        if os.path.getsize(self.data_file) == 0:
            with open(self.data_file, "w") as f:
                json.dump({}, f)
            return {}
        
        try:
            with open(self.data_file, "r") as f:
                return json.load(f)
        except json.JSONDecodeError:
            with open(self.data_file, "w") as f:
                json.dump({}, f)
            return {}
    
    def save_users(self):
        with open(self.data_file, "w") as f:
            json.dump(self.users, f, indent=2)
    
    def add_user(self, user_id, username):
        user_id = str(user_id)
        if user_id not in self.users:
            self.users[user_id] = {
                "username": username,
                "collection": [],
                "opened_crates": 0,
                "last_crate_time": 0,
                "crates_today": 0,
                "created_at": time.strftime("%Y-%m-%d %H:%M:%S")
            }
            self.save_users()
            return True
        return False
    
    def can_open_crate(self, user_id):
        user_id = str(user_id)
        if user_id not in self.users:
            return False
            
        user = self.users[user_id]
        if time.time() - user["last_crate_time"] > CRATE_PERIOD_HOURS * 3600:
            user["crates_today"] = 0
            
        return user["crates_today"] < CRATE_LIMIT
    
    def add_tank_to_collection(self, user_id, tank_id):
        user_id = str(user_id)
        if user_id in self.users:
            if tank_id not in self.users[user_id]["collection"]:
                self.users[user_id]["collection"].append(tank_id)
                self.users[user_id]["opened_crates"] += 1
                self.users[user_id]["crates_today"] += 1
                self.users[user_id]["last_crate_time"] = time.time()
                self.save_users()
                return True
        return False
    
    def get_user_collection(self, user_id):
        user_id = str(user_id)
        return self.users.get(user_id, {}).get("collection", [])
    
    def reset_crate_limit(self, user_id):
        user_id = str(user_id)
        if user_id in self.users:
            self.users[user_id]["crates_today"] = 0
            self.users[user_id]["last_crate_time"] = 0
            self.save_users()
            return True
        return False

# –°–∏—Å—Ç–µ–º–∞ –∫–µ–π—Å–æ–≤
class CrateSystem:
    def __init__(self):
        self.tank_db = TankDatabase()
        
    def open_crate(self):
        tank = self.tank_db.get_random_tank()
        return tank if tank else None

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–ª–ª–µ–∫—Ü–∏–∏
class CollectionView:
    def __init__(self):
        self.tank_db = TankDatabase()
    
    def get_collection_details(self, collection):
        tanks = []
        for tank_id in collection:
            tank = self.tank_db.get_tank(tank_id)
            if tank:
                tanks.append(tank)
        return tanks
    
    def format_collection(self, collection):
        if not collection:
            return "üèÜ –í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø–æ–∫–∞ –ø—É—Å—Ç–∞!"
            
        groups = {}
        for tank in self.get_collection_details(collection):
            rarity = tank["rarity"]
            groups.setdefault(rarity, []).append(tank)
        
        response = "üèÜ –í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è —Ç–∞–Ω–∫–æ–≤:\n\n"
        for rarity, tanks in groups.items():
            response += f"‚≠ê {rarity} ({len(tanks)} —Ç–∞–Ω–∫–æ–≤):\n"
            for tank in tanks[:5]:
                response += f"  - {tank['name']}\n"
            if len(tanks) > 5:
                response += f"  ... –∏ –µ—â–µ {len(tanks)-5}\n"
            response += "\n"
        
        return response

# –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
class PromoSystem:
    def __init__(self):
        self.data_file = os.path.join(DATA_PATH, "promo_codes.json")
        self.promos = self.load_promos()
    
    def load_promos(self):
        try:
            if os.path.exists(self.data_file):
                with open(self.data_file, "r") as f:
                    return json.load(f)
        except:
            pass
        return {}
    
    def save_promos(self):
        with open(self.data_file, "w") as f:
            json.dump(self.promos, f, indent=2)
    
    def create_promo(self, reward, description, expires_days=30, max_uses=100):
        import string
        from datetime import datetime, timedelta
        
        code = ''.join(random.choices(string.ascii_uppercase + string.digits, k=8))
        expires = (datetime.now() + timedelta(days=expires_days)).strftime("%Y-%m-%d %H:%M:%S")
        
        self.promos[code] = {
            "reward": reward,
            "description": description,
            "created": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "expires": expires,
            "max_uses": max_uses,
            "used_by": []
        }
        self.save_promos()
        return code
    
    def apply_promo(self, code, user_id):
        code = code.upper()
        if code in self.promos:
            promo = self.promos[code]
            from datetime import datetime
            if datetime.strptime(promo["expires"], "%Y-%m-%d %H:%M:%S") < datetime.now():
                return False, "–ü—Ä–æ–º–æ–∫–æ–¥ –∏—Å—Ç–µ–∫"
                
            if len(promo["used_by"]) >= promo["max_uses"]:
                return False, "–õ–∏–º–∏—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∏—Å—á–µ—Ä–ø–∞–Ω"
                
            user_id = str(user_id)
            if user_id in promo["used_by"]:
                return False, "–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥"
                
            promo["used_by"].append(user_id)
            self.save_promos()
            return True, promo["description"]
        
        return False, "–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥"

# –ê–¥–º–∏–Ω—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
def is_admin(user_id):
    return user_id in ADMIN_IDS

def admin_panel_handler():
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", "üéÅ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥")
    keyboard.add("üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã")
    keyboard.add("‚ùå –ó–∞–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å")
    return "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", keyboard

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def format_time(seconds):
    hours = int(seconds // 3600)
    minutes = int((seconds % 3600) // 60)
    return f"{hours}—á {minutes}–º"

def format_tank_info(tank):
    return (
        f"‚öîÔ∏è {tank['name']} ({tank['year']})\n"
        f"üè∑Ô∏è –†–µ–¥–∫–æ—Å—Ç—å: {tank['rarity']}\n"
        f"üè≥Ô∏è –ù–∞—Ü–∏—è: {tank['nation']}\n"
        f"üî∞ –¢–∏–ø: {tank['type']}\n"
        f"üõ°Ô∏è –ë—Ä–æ–Ω—è: {tank['armor']}\n"
        f"üî´ –û—Ä—É–¥–∏–µ: {tank['gun']}\n"
        f"üöÄ –î–≤–∏–≥–∞—Ç–µ–ª—å: {tank['engine']}\n"
        f"üèéÔ∏è –°–∫–æ—Ä–æ—Å—Ç—å: {tank['speed']} –∫–º/—á\n"
        f"üìñ {tank['description']}"
    )

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º
try:
    user_manager = UserManager()
    crate_system = CrateSystem()
    collection_view = CollectionView()
    promo_system = PromoSystem()
    logger.info("–°–∏—Å—Ç–µ–º—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º: {e}")
    import setup_database
    setup_database
    user_manager = UserManager()
    crate_system = CrateSystem()
    collection_view = CollectionView()
    promo_system = PromoSystem()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    username = message.from_user.username or str(user_id)
    
    try:
        user_manager.add_user(user_id, username)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    if is_admin(user_id):
        text = (
            "üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /{ADMIN_SECRET} –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n\n"
            "‚öôÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/open_crate - –û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å\n"
            "/mycollection - –í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è\n"
            "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞"
        )
    else:
        text = (
            "üéÆ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¢–∞–Ω–∫–æ–≤—É—é –ö–æ–ª–ª–µ–∫—Ü–∏—é!\n\n"
            "‚ö° –ö–∞–∂–¥—ã–µ 5 —á–∞—Å–æ–≤ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å –¥–æ 5 –∫–µ–π—Å–æ–≤ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–º–∏ —Ç–∞–Ω–∫–∞–º–∏!\n\n"
            "‚öôÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/open_crate - –û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å\n"
            "/mycollection - –í–∞—à–∞ –∫–æ–ª–ª–µ–∫—Ü–∏—è\n"
            "/promo [–∫–æ–¥] - –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥"
        )
    
    bot.reply_to(message, text)

@bot.message_handler(commands=['open_crate'])
def open_crate(message):
    user_id = message.from_user.id
    
    try:
        can_open = user_manager.can_open_crate(user_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–∞ –∫–µ–π—Å–æ–≤: {e}")
        bot.reply_to(message, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    if not can_open:
        try:
            user_data = user_manager.users.get(str(user_id), {})
            last_time = user_data.get("last_crate_time", 0)
            next_time = last_time + CRATE_PERIOD_HOURS * 3600
            wait_time = max(0, next_time - time.time())
            
            bot.reply_to(
                message,
                f"‚è≥ –í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç –∫–µ–π—Å–æ–≤!\n"
                f"–°–ª–µ–¥—É—é—â–µ–µ –æ—Ç–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑: {format_time(wait_time)}"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ä–∞—Å—á–µ—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏: {e}")
            bot.reply_to(message, "‚è≥ –í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç –∫–µ–π—Å–æ–≤! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    try:
        tank = crate_system.open_crate()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–∞: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–µ–π—Å–∞")
        return
    
    if tank:
        try:
            if user_manager.add_tank_to_collection(user_id, tank["id"]):
                response = (
                    f"üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–∞–Ω–∫:\n\n"
                    f"{format_tank_info(tank)}"
                )
                bot.reply_to(message, response)
                return
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–∞–Ω–∫–∞: {e}")
    
    bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–µ–π—Å–∞")

@bot.message_handler(commands=['mycollection'])
def show_collection(message):
    user_id = message.from_user.id
    try:
        collection = user_manager.get_user_collection(user_id)
        response = collection_view.format_collection(collection)
        bot.reply_to(message, response)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–æ–ª–ª–µ–∫—Ü–∏–∏: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏")

@bot.message_handler(commands=['promo'])
def apply_promo(message):
    user_id = message.from_user.id
    args = message.text.split()
    
    if len(args) < 2:
        bot.reply_to(message, "‚ÑπÔ∏è –£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥: /promo –ö–û–î")
        return
    
    promo_code = args[1]
    try:
        success, result = promo_system.apply_promo(promo_code, user_id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞")
        return
    
    if success:
        try:
            user_manager.reset_crate_limit(user_id)
            bot.reply_to(message, f"üéâ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n{result}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–∞: {e}")
            bot.reply_to(message, f"üéâ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω, –Ω–æ —Å–±—Ä–æ—Å –ª–∏–º–∏—Ç–∞ –Ω–µ —É–¥–∞–ª—Å—è")
    else:
        bot.reply_to(message, f"‚ùå {result}")

@bot.message_handler(commands=[ADMIN_SECRET])
def admin_command(message):
    if is_admin(message.from_user.id):
        try:
            text, keyboard = admin_panel_handler()
            bot.send_message(message.chat.id, text, reply_markup=keyboard)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏: {e}")
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
    else:
        bot.reply_to(message, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")

@bot.message_handler(func=lambda msg: msg.text == "‚ùå –ó–∞–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å")
def close_admin_panel(message):
    if is_admin(message.from_user.id):
        bot.send_message(message.chat.id, "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –∑–∞–∫—Ä—ã—Ç–∞", reply_markup=types.ReplyKeyboardRemove())
    else:
        bot.reply_to(message, "‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")

@bot.message_handler(func=lambda msg: msg.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
def show_stats(message):
    if is_admin(message.from_user.id):
        try:
            total_users = len(user_manager.users)
            total_tanks = sum(len(user['collection']) for user in user_manager.users.values())
            bot.reply_to(message, f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\nüë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\nüéÅ –û—Ç–∫—Ä—ã—Ç–æ –∫–µ–π—Å–æ–≤: {total_tanks}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

@bot.message_handler(func=lambda msg: msg.text == "üéÅ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥")
def create_promo(message):
    if is_admin(message.from_user.id):
        try:
            code = promo_system.create_promo(
                reward="–°–±—Ä–æ—Å –ª–∏–º–∏—Ç–∞ –∫–µ–π—Å–æ–≤",
                description="–ü–æ–∑–≤–æ–ª—è–µ—Ç —Å–±—Ä–æ—Å–∏—Ç—å –ª–∏–º–∏—Ç –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–µ–π—Å–æ–≤",
                expires_days=30,
                max_uses=100
            )
            bot.reply_to(message, f"‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ–º–æ–∫–æ–¥: {code}\n–ù–∞–≥—Ä–∞–¥–∞: –°–±—Ä–æ—Å –ª–∏–º–∏—Ç–∞ –∫–µ–π—Å–æ–≤")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞")

@bot.message_handler(func=lambda msg: msg.text == "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
def user_list(message):
    if is_admin(message.from_user.id):
        try:
            users = user_manager.users
            response = "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞:\n\n"
            for user_id, data in users.items():
                response += f"üë§ {data['username']} (ID: {user_id})\n"
                response += f"üéÅ –û—Ç–∫—Ä—ã—Ç–æ –∫–µ–π—Å–æ–≤: {data['opened_crates']}\n\n"
            bot.reply_to(message, response)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

@bot.message_handler(func=lambda msg: msg.text == "üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã")
def reset_limits(message):
    if is_admin(message.from_user.id):
        try:
            for user_id in user_manager.users:
                user_manager.reset_crate_limit(user_id)
            bot.reply_to(message, "‚úÖ –õ–∏–º–∏—Ç—ã –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–±—Ä–æ—à–µ–Ω—ã!")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –ª–∏–º–∏—Ç–æ–≤: {e}")
            bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –ª–∏–º–∏—Ç–æ–≤")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == '__main__':
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    logger.info(f"–¢–æ–∫–µ–Ω –±–æ—Ç–∞: {BOT_TOKEN}")
    logger.info(f"ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {ADMIN_IDS}")
    
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
